

 Explicação do código 1-Abas na página



 Esse código HTML, CSS e JavaScript 
 implementa um sistema de navegação por abas, 
 onde é possível alternar entre diferentes seções de conteúdo sem recarregar a página. 
 Vou detalhar cada parte:

---

## **HTML (Estrutura)**

### **1. Estrutura principal**
- O documento HTML é estruturado com uma `div` que contém botões representando as abas, seguidas de elementos `div` que contêm o conteúdo associado a cada aba.

### **2. Abas**
```html
<div class="tab">
    <button class="tablinks" onclick="openTab(event, 'Aba1')">Aba 1</button>
    <button class="tablinks" onclick="openTab(event, 'Aba2')">Aba 2</button>
    <button class="tablinks" onclick="openTab(event, 'Aba3')">Aba 3</button>
</div>
```
- Cada botão usa a classe `tablinks` e possui um evento `onclick` que chama a função `openTab`, passando o evento e o nome da aba como parâmetros.

### **3. Conteúdo das abas**
```html
<div id="Aba1" class="tabcontent">
    <h3>Aba 1</h3>
    <p>Conteúdo da Aba 1.</p>
</div>
<div id="Aba2" class="tabcontent">
    <h3>Aba 2</h3>
    <p>Conteúdo da Aba 2.</p>
</div>
<div id="Aba3" class="tabcontent">
    <h3>Aba 3</h3>
    <p>Conteúdo da Aba 3.</p>
</div>
```
- Cada `div` possui um `id` correspondente ao nome da aba e a classe `tabcontent` para o estilo e controle de visibilidade.

---

## **CSS (Estilização)**

### **1. Estrutura básica**
```css
body {
    font-family: Arial, sans-serif;
}
```
- Define a fonte padrão para o conteúdo.

### **2. Container de abas**
```css
.tab {
    overflow: hidden;
    border-bottom: 1px solid #ccc;
}
```
- `overflow: hidden` impede que elementos internos transbordem.
- Uma borda inferior é adicionada para separar as abas visualmente do conteúdo.

### **3. Botões das abas**
```css
.tab button {
    background-color: inherit;
    border: none;
    outline: none;
    cursor: pointer;
    padding: 14px 16px;
    transition: 0.3s;
    font-size: 17px;
}
```
- `background-color: inherit`: Mantém o fundo transparente ou igual ao contêiner pai.
- `border: none` e `outline: none`: Remove bordas e contornos padrão.
- `transition: 0.3s`: Adiciona uma transição suave ao estilo do botão ao interagir.

### **4. Botões ao passar o mouse e ao estarem ativos**
```css
.tab button:hover {
    background-color: #ddd;
}
.tab button.active {
    background-color: #ccc;
}
```
- `:hover`: Altera a cor de fundo ao passar o mouse.
- `.active`: Altera a cor de fundo do botão selecionado.

### **5. Conteúdo das abas**
```css
.tabcontent {
    display: none;
    padding: 6px 12px;
    border: 1px solid #ccc;
    border-top: none;
}
.tabcontent.active {
    display: block;
}
```
- `display: none`: Oculta o conteúdo por padrão.
- `display: block`: Exibe o conteúdo da aba ativa.

---

## **JavaScript (Funcionamento)**

### **Função `openTab`**
```javascript
function openTab(evt, tabName) {
    var i, tabcontent, tablinks;

    // Esconde todas as abas
    tabcontent = document.getElementsByClassName("tabcontent");
    for (i = 0; i < tabcontent.length; i++) {
        tabcontent[i].style.display = "none";
    }

    // Remove a classe "active" de todos os botões
    tablinks = document.getElementsByClassName("tablinks");
    for (i = 0; i < tablinks.length; i++) {
        tablinks[i].className = tablinks[i].className.replace(" active", "");
    }

    // Mostra a aba atual e adiciona a classe "active" ao botão que abriu a aba
    document.getElementById(tabName).style.display = "block";
    evt.currentTarget.className += " active";
}
```

### **Passo a passo do funcionamento**
1. **Ocultar todo o conteúdo das abas:**
   ```javascript
   tabcontent = document.getElementsByClassName("tabcontent");
   for (i = 0; i < tabcontent.length; i++) {
       tabcontent[i].style.display = "none";
   }
   ```
   - Acessa todos os elementos com a classe `tabcontent` e oculta todos alterando o estilo `display` para `none`.

2. **Remover a classe `active` de todos os botões:**
   ```javascript
   tablinks = document.getElementsByClassName("tablinks");
   for (i = 0; i < tablinks.length; i++) {
       tablinks[i].className = tablinks[i].className.replace(" active", "");
   }
   ```
   - Acessa todos os botões (`tablinks`) e remove a classe `active`.

3. **Mostrar o conteúdo da aba clicada:**
   ```javascript
   document.getElementById(tabName).style.display = "block";
   ```
   - Localiza a `div` com o `id` da aba correspondente e define o estilo `display` como `block`.

4. **Marcar o botão clicado como ativo:**
   ```javascript
   evt.currentTarget.className += " active";
   ```
   - Adiciona a classe `active` ao botão que foi clicado.

---

### **Resumo**
- O HTML organiza as abas e o conteúdo.
- O CSS estiliza os botões e o comportamento visual (hover, ativo, etc.).
- O JavaScript manipula a visibilidade e as classes para alternar entre as abas.





